[project]
name = "ray-graph"
version = "0.3.3"
authors = [{ name = "ZhengYu, Xu", email = "zen-xu@outlook.com" }]
description = "Help to build ray actor graph"
classifiers = [
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
readme = "README.md"
requires-python = ">=3.10,<3.13"
dependencies = [
  "ray[default]>=2.20",
  "sunray>=0.10",
  "typing-extensions",
  "rustworkx>=0.15",
]
[project.optional-dependencies]
rich = ["rich"]
graphviz = ["pydot", "pillow"]
tracing = ["opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp"]
all = [
  "rich",
  "pydot",
  "pillow",
  "opentelemetry-api",
  "opentelemetry-sdk",
  "opentelemetry-exporter-otlp",
]

[project.urls]
homepage   = "https://github.com/zen-xu/ray-graph"
repository = "https://github.com/zen-xu/ray-graph.git"
issues     = "https://github.com/zen-xu/ray-graph/issues"

[build-system]
build-backend = "hatchling.build"
requires      = ["hatchling"]

[tool.hatch.build.targets.wheel]
packages = ["src/ray_graph"]

# -------------------------------- Pixi --------------------------------

[tool.pixi.project]
channels  = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
ray_graph       = { path = ".", editable = true }
pre-commit      = "*"
hatchling       = "*"
mypy            = "*"
pytest          = ">=8,<9"
pytest-coverage = "*"
setproctitle    = "*"

[tool.pixi.tasks]
lint = "pre-commit run -a"
test = "pytest"
cov  = "pytest --cov --cov-report=xml --cov-report=term -q"

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.environments]
default = ["py312", "all"]
py310   = ["py310", "rich", "graphviz", "tracing"]
py311   = ["py311", "rich", "graphviz", "tracing"]
py312   = ["py312", "rich", "graphviz", "tracing"]


# -------------------------------- Ruff --------------------------------

[tool.ruff]
fix            = true
line-length    = 99
target-version = "py310"

[tool.ruff.lint]
select = [
  "E",   # pyflakes
  "F",   # pycodestyle error
  "W",   # pycodestyle warning
  "I",   # isort
  "N",   # pep8-naming
  "D",   # pydocstyle
  "UP",  # pyupgrade
  "TC",  # flake8-type-checking
  "C4",  # flake8-comprehensions
  "FA",  # flake8-future-annotations
  "ISC", # flake8-implicit-str-concat
  "PIE", # flake8-pie
  "PT",  # flake8-pytest-style
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "TC",  # flake8-type-checking
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "RUF", # ruff-specific-rules
]
ignore = [
  "D100", # undocumented-public-module
  "D104", # undocumented-public-package
  "D107", # undocumented-public-init
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1

[tool.ruff.format]
docstring-code-format = true

# -------------------------------- Mypy --------------------------------

[tool.mypy]
explicit_package_bases = true
files                  = "src"
namespace_packages     = true
show_error_codes       = true
disable_error_code     = ["annotation-unchecked"]

# -------------------------------- Coverage --------------------------------

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_also = [
  "^\\s*if TYPE_CHECKING:",
  "^\\s*@overload( |$)",
  "def __enter__",
  "def __exit__",

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about imports:
  "^\\s*import ",
  "^\\s*from ",

  # Don't complain if it is abstractmethod:
  "@(abc\\.)?abstractmethod",

  # Don't complain if it is property
  "@property",

  # Don't complain if it is protocol
  "class .*\\bProtocol\\):",

  # Don't complain if it is ABC
  "class .*\\(ABC\\):",
  "class .*\\((abc\\.)?.ABC\\):",
]
show_missing = true
skip_covered = true

# -------------------------------- Pytest --------------------------------
[tool.pytest.ini_options]
filterwarnings = ["ignore:.*local mode.*:DeprecationWarning"]
